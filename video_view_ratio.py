import streamlit as st
import dataset
import matplotlib.pyplot as plt
import numpy as np
import utils

def render_documentation():
    st.write('')

    st.subheader('6. Average views per video', anchor='10')

    st.write('''<div style="text-align: justify;">The ratio of views per video for each channel can 
    be found by iterating through each channel and dividing the total views by total videos for that channel.
    It should be noted that this ratio is an average value and it is not the actual ratio for views each video has got.</div>
    ''', unsafe_allow_html=True)
    st.write('')         
    st.write('''<div style="text-align: justify;">First, we initialize the views, videos and ratios list, (line 2-4) as 
    the values from these columns need to be converted from string to int. The colors list is used for changing 
    the alpha value for the rgba color of each scatter point based on the value at that point.</div>
    ''', unsafe_allow_html=True)
    st.write('')         
    st.write('''<div style="text-align: justify;">Inside the loop, we convert the values of the columns to int
    using the utility function "string_to_int" (line 7-8) and append them to their respective list (line 9-10).
    A reference to the converted values are kept to calculate the views to video ratio (line 11). As some 
    channels do not have video count value, we directly assign 0 as the ratio to avoid division by 0</div>
    ''', unsafe_allow_html=True)
    st.write('') 
    st.write('''<div style="text-align: justify;">The maximum ratio is calculated using amax (line 12) function of numpy
    to scale the ratios in the range of 0 to 1 for plotting and especially to use it as an alpha value for the color.
    Ratios are scaled by mapping the values using the fit_value function from utils with 1 as the upper_bound.
    An rgba color list is generated by iterating over the ratios, taking half the ratio and adding an offset of 0.3 
    to make sure the colors are not too transparent.</div>
    ''', unsafe_allow_html=True)
    st.write('') 
    st.write('''<div style="text-align: justify;">We can see the overlapping scatter points along the x-axis 
    in this plot which shows that views to videos ratio is almost consistent for channels regardless of their rank
    </div>
    ''', unsafe_allow_html=True)

    st.code('''def plot_views_to_videos_ratio():
    views = []
    videos = []
    ratios = []
    colors = []
    for i, channel in dataset.most_subscribed_channels.iterrows():
        view_count = utils.string_to_int(channel[dataset.VIEWS_COL])
        video_count = utils.string_to_int(channel[dataset.VIDEOS_COL])
        views.append(view_count)
        videos.append(video_count)
        ratios.append(view_count/video_count if video_count > 0 else 0)
    max_ratio = np.amax(ratios)
    ratios = [*map(utils.fit_value, [1]*len(ratios), ratios, [max_ratio]*len(ratios))]
    for i in ratios:
        colors.append([1,0,0,(i/2) + 0.3])
    fig, ax = plt.subplots()
    ax.scatter(dataset.most_subscribed_channels[dataset.RANK_COL], ratios, color=colors)
    ax.set_xticks(np.arange(0, len(ratios), 100))
    ax.set_xlabel('rank') 
    ax.set_ylabel('views per video')
    fig.set_figwidth(10)
    st.pyplot(fig)''', line_numbers=True)

def plot_views_to_videos_ratio():
  views = []
  videos = []
  ratios = []
  colors = []
  for i, channel in dataset.most_subscribed_channels.iterrows():
    view_count = utils.string_to_int(channel[dataset.VIEWS_COL])
    video_count = utils.string_to_int(channel[dataset.VIDEOS_COL])
    views.append(view_count)
    videos.append(video_count)
    ratios.append(view_count/video_count if video_count > 0 else 0)
  max_ratio = np.amax(ratios)
  ratios = [*map(utils.fit_value, [1]*len(ratios), ratios, [max_ratio]*len(ratios))]
  for i in ratios:
    colors.append([1,0,0,(i/2) + 0.3])
  fig, ax = plt.subplots()
  ax.scatter(dataset.most_subscribed_channels[dataset.RANK_COL], ratios, color=colors)
  ax.set_xticks(np.arange(0, len(ratios), 100))
  ax.set_xlabel('rank') 
  ax.set_ylabel('views per video')
  fig.set_figwidth(10)
  st.pyplot(fig)